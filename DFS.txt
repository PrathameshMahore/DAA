// Shree Ganesha
// DFS -> using stack
#include<iostream>
#include<algorithm>
#include<climits>
#include<stack>
using namespace std;
int main(){
        int ver ;
    stack<int> myStack ;
    cout<<"Enter no of vertices :"<<endl;
    cin>>ver;
    int adj_mat[ver][ver];
    for(int i=0;i<ver;i++){
        adj_mat[i][i] = 0;
        for(int j=i+1;j<ver;j++){
            cout<<"Enter value for "<<i<<"-"<<j<<" ";
            cin>>adj_mat[i][j];
            adj_mat[j][i] = adj_mat[i][j] ;
        }
    }
    cout<<"The adjacency matrix is :\n";
    for(int i=0;i<ver;i++){
        for(int j=0;j<ver;j++){
            cout<<adj_mat[i][j]<<"\t";
        }
        cout<<"\n";
    }
    int vist[ver] ;
    for(int i=0;i<ver;i++){
        vist[i] = 0;
    }
    int root_node = 0;
    myStack.push(root_node);
    cout<<root_node<<"\t";
    vist[root_node] = 1;
    int i;
    int flag ;
    while(!myStack.empty()){
        root_node = myStack.top();
        flag = 0 ; //starting la all are unvisted
        for(i=0;i<ver;i++){
            if(adj_mat[root_node][i]==1 && vist[i]==0){
                myStack.push(i);
                cout<<i<<"\t";
                vist[i] = 1;
                // root_node = myStack.top();
                flag = 1 ; //unvisited adjacent vertices found --> now visited
                break;
            }
        }
        if(flag==0){//manje unvisted rahilech nahit sagle visited hote
        //mg pop and backtrack
            myStack.pop();
            // root_node = myStack.top();
        }
    }
    
    return 0;
}

//  1
//  0
//  1
//  0
//  0
//  0
//  1
//  1
//  0
//  1
//  1
//  1
//  1
//  1
//  0
//  1
//  0
//  0
//  0
//  1
//  0

output-->
Enter no of vertices :
7
Enter value for 0-1  1
 0
 1
 0
 0
 0
 1
 1
 0
 1
 1
 1
 1
 1
 0
 1
 0
 0
 0
 1
 01

 0

 1

 0

 0

 0

 1

 1

 0

 1

 1

 1

 1

 1

 0

 1

 0

 0

 0

 1

 0
Enter value for 0-2 Enter value for 0-3 Enter value for 0-4 Enter value for 0-5 Enter value for 0-6 Enter value for 1-2 Enter value for 1-3 Enter value for 1-4 Enter value for 1-5 Enter value for 1-6 Enter value for 2-3 Enter value for 2-4 Enter value for 2-5 Enter value for 2-6 Enter value for 3-4 Enter value for 3-5 Enter value for 3-6 Enter value for 4-5 Enter value for 4-6 Enter value for 5-6 The adjacency matrix is :
0	1	0	1	0	0	0	
1	0	1	1	0	1	1	
0	1	0	1	1	1	0	
1	1	1	0	1	0	0	
0	0	1	1	0	0	1	
0	1	1	0	0	0	0	
0	1	0	0	1	0	0

soln ->	
0	1	2	3	4	6	5	

=== Code Execution Successful ===