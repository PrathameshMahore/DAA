#include <stdio.h>
#include <limits.h>

int main() {
    printf("Enter the number of vertices:\n");
    int ver;
    scanf("%d", &ver);

    int adj_mat[ver][ver];
    printf("Give the weights of graph\n");

    // Initialize the adjacency matrix to zero
    for (int i = 0; i < ver; i++) {
        for (int j = 0; j < ver; j++) {
            adj_mat[i][j] = 0;
        }
    }

    // Read the weights of the graph
    for (int i = 0; i < ver; i++) {
        for (int j = i + 1; j < ver; j++) {
            printf("Enter for %d-%d:\n", i, j);
            scanf("%d", &adj_mat[i][j]);
            // Since the graph is undirected, fill the symmetric entry
            adj_mat[j][i] = adj_mat[i][j];
        }
    }

    printf("Entered graph is:\n");
    // Display the adjacency matrix
    for (int i = 0; i < ver; i++) {
        for (int j = 0; j < ver; j++) {
            printf("%d\t", adj_mat[i][j]);
        }
        printf("\n");
    }

    int min;
    int cost[ver];
    int dist[ver];

    // Initialize the cost and distance arrays
    for (int i = 0; i < ver; i++) {
        dist[i] = INT_MAX;
        cost[i] = 0;
    }

    dist[ver - 1] = -1;  // note...

    // Compute the shortest path
    for (int i = ver - 2; i >= 0; i--) {
        min = INT_MAX;
        for (int j = ver - 1; j > i; j--) {
            if (adj_mat[i][j] > 0 && (adj_mat[i][j] + cost[j]) < min) {
                cost[i] = adj_mat[i][j] + cost[j];
                min = cost[i];
                dist[i] = j;
            }
        }
    }

    // Print the minimum cost
    printf("The minimum cost of a path is --> %d\n", cost[0]);

    // Print the shortest path
    int i = 0;
    printf("And the shortest path is --->\n");
    printf("0-");
    while (dist[i] != -1) {
        printf("%d-", dist[i]);
        i = dist[i];
    }

    printf("\n");
    return 0;
}
